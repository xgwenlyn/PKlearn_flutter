// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:learn_flutter/bean/settings/settings_response_entity.dart';
import 'package:learn_flutter/generated/json/settings_response_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {			case SettingsResponseEntity:
			return settingsResponseEntityFromJson(data as SettingsResponseEntity, json) as T;			case SettingsResponseFloor:
			return settingsResponseFloorFromJson(data as SettingsResponseFloor, json) as T;			case SettingsResponseFloorsCf:
			return settingsResponseFloorsCfFromJson(data as SettingsResponseFloorsCf, json) as T;			case SettingsResponseFloorsData:
			return settingsResponseFloorsDataFromJson(data as SettingsResponseFloorsData, json) as T;			case SettingsResponseFloorsDataNode:
			return settingsResponseFloorsDataNodeFromJson(data as SettingsResponseFloorsDataNode, json) as T;			case SettingsResponseFloorsDataNodesJumpInfo:
			return settingsResponseFloorsDataNodesJumpInfoFromJson(data as SettingsResponseFloorsDataNodesJumpInfo, json) as T;			case SettingsResponseFloorsDataNodesTitle:
			return settingsResponseFloorsDataNodesTitleFromJson(data as SettingsResponseFloorsDataNodesTitle, json) as T;			case SettingsResponseFloorsDataNodesClickMta:
			return settingsResponseFloorsDataNodesClickMtaFromJson(data as SettingsResponseFloorsDataNodesClickMta, json) as T;			case SettingsResponseFloorsDataNodesSubtitle:
			return settingsResponseFloorsDataNodesSubtitleFromJson(data as SettingsResponseFloorsDataNodesSubtitle, json) as T;			case SettingsResponseFloorsDataNodesExpoMta:
			return settingsResponseFloorsDataNodesExpoMtaFromJson(data as SettingsResponseFloorsDataNodesExpoMta, json) as T;			case SettingsResponseOthers:
			return settingsResponseOthersFromJson(data as SettingsResponseOthers, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {			case SettingsResponseEntity:
			return settingsResponseEntityToJson(data as SettingsResponseEntity);			case SettingsResponseFloor:
			return settingsResponseFloorToJson(data as SettingsResponseFloor);			case SettingsResponseFloorsCf:
			return settingsResponseFloorsCfToJson(data as SettingsResponseFloorsCf);			case SettingsResponseFloorsData:
			return settingsResponseFloorsDataToJson(data as SettingsResponseFloorsData);			case SettingsResponseFloorsDataNode:
			return settingsResponseFloorsDataNodeToJson(data as SettingsResponseFloorsDataNode);			case SettingsResponseFloorsDataNodesJumpInfo:
			return settingsResponseFloorsDataNodesJumpInfoToJson(data as SettingsResponseFloorsDataNodesJumpInfo);			case SettingsResponseFloorsDataNodesTitle:
			return settingsResponseFloorsDataNodesTitleToJson(data as SettingsResponseFloorsDataNodesTitle);			case SettingsResponseFloorsDataNodesClickMta:
			return settingsResponseFloorsDataNodesClickMtaToJson(data as SettingsResponseFloorsDataNodesClickMta);			case SettingsResponseFloorsDataNodesSubtitle:
			return settingsResponseFloorsDataNodesSubtitleToJson(data as SettingsResponseFloorsDataNodesSubtitle);			case SettingsResponseFloorsDataNodesExpoMta:
			return settingsResponseFloorsDataNodesExpoMtaToJson(data as SettingsResponseFloorsDataNodesExpoMta);			case SettingsResponseOthers:
			return settingsResponseOthersToJson(data as SettingsResponseOthers);    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {			case 'SettingsResponseEntity':
			return SettingsResponseEntity().fromJson(json);			case 'SettingsResponseFloor':
			return SettingsResponseFloor().fromJson(json);			case 'SettingsResponseFloorsCf':
			return SettingsResponseFloorsCf().fromJson(json);			case 'SettingsResponseFloorsData':
			return SettingsResponseFloorsData().fromJson(json);			case 'SettingsResponseFloorsDataNode':
			return SettingsResponseFloorsDataNode().fromJson(json);			case 'SettingsResponseFloorsDataNodesJumpInfo':
			return SettingsResponseFloorsDataNodesJumpInfo().fromJson(json);			case 'SettingsResponseFloorsDataNodesTitle':
			return SettingsResponseFloorsDataNodesTitle().fromJson(json);			case 'SettingsResponseFloorsDataNodesClickMta':
			return SettingsResponseFloorsDataNodesClickMta().fromJson(json);			case 'SettingsResponseFloorsDataNodesSubtitle':
			return SettingsResponseFloorsDataNodesSubtitle().fromJson(json);			case 'SettingsResponseFloorsDataNodesExpoMta':
			return SettingsResponseFloorsDataNodesExpoMta().fromJson(json);			case 'SettingsResponseOthers':
			return SettingsResponseOthers().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'SettingsResponseEntity':
			return List<SettingsResponseEntity>();			case 'SettingsResponseFloor':
			return List<SettingsResponseFloor>();			case 'SettingsResponseFloorsCf':
			return List<SettingsResponseFloorsCf>();			case 'SettingsResponseFloorsData':
			return List<SettingsResponseFloorsData>();			case 'SettingsResponseFloorsDataNode':
			return List<SettingsResponseFloorsDataNode>();			case 'SettingsResponseFloorsDataNodesJumpInfo':
			return List<SettingsResponseFloorsDataNodesJumpInfo>();			case 'SettingsResponseFloorsDataNodesTitle':
			return List<SettingsResponseFloorsDataNodesTitle>();			case 'SettingsResponseFloorsDataNodesClickMta':
			return List<SettingsResponseFloorsDataNodesClickMta>();			case 'SettingsResponseFloorsDataNodesSubtitle':
			return List<SettingsResponseFloorsDataNodesSubtitle>();			case 'SettingsResponseFloorsDataNodesExpoMta':
			return List<SettingsResponseFloorsDataNodesExpoMta>();			case 'SettingsResponseOthers':
			return List<SettingsResponseOthers>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}